{"version":3,"sources":["Card.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","card","display","cardDetails","flex","cardMedia","width","FeaturedPost","props","classes","post","Grid","item","xs","md","CardActionArea","component","href","Card","className","CardContent","Typography","variant","title","color","date","paragraph","description","CardMedia","image","imageTitle","Copyright","Link","target","GitHub","fontSize","s","Date","getFullYear","theme","root","flexDirection","minHeight","main","marginTop","spacing","marginBottom","footer","padding","backgroundColor","palette","type","grey","StickyFooter","BottomNavigation","BottomNavigationAction","label","value","icon","Code","CssBaseline","Container","maxWidth","gutterBottom","DeveloperMode","container","imageText","map","key","Favorite","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0UAWMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,QAAS,QAEXC,YAAa,CACXC,KAAM,GAERC,UAAW,CACTC,MAAO,OAII,SAASC,EAAaC,GACnC,IAAMC,EAAUV,IACRW,EAASF,EAATE,KAER,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,IACrB,kBAACC,EAAA,EAAD,CAAgBC,UAAU,IAAIC,KAAK,KACjC,kBAACC,EAAA,EAAD,CAAMC,UAAWV,EAAQR,MACvB,yBAAKkB,UAAWV,EAAQN,aACtB,kBAACiB,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAAYL,UAAU,KAAKM,QAAQ,MAChCZ,EAAKa,OAER,kBAACF,EAAA,EAAD,CAAYC,QAAQ,YAAYE,MAAM,iBACnCd,EAAKe,MAER,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,YAAYI,WAAS,GACtChB,EAAKiB,aAER,kBAACN,EAAA,EAAD,CAAYC,QAAQ,YAAYE,MAAM,WAAtC,yBAKJ,kBAACI,EAAA,EAAD,CAAWT,UAAWV,EAAQJ,UAAWwB,MAAOnB,EAAKmB,MAAON,MAAOb,EAAKoB,gBC/BlF,SAASC,IACP,OACE,kBAACV,EAAA,EAAD,CAAYC,QAAQ,QAAQE,MAAM,iBAC/B,kBACD,kBAACQ,EAAA,EAAD,CAAMR,MAAM,UAAUP,KAAK,kCAAkCgB,OAAO,UAApE,iBACgB,kBAACC,EAAA,EAAD,CAAQC,SAAS,QAAOC,GAAC,KACjC,KACP,IAAIC,MAAOC,cACX,KAMP,IAAMvC,EAAYC,aAAW,SAAAuC,GAAK,MAAK,CACrCC,KAAM,CACJtC,QAAS,OACTuC,cAAe,SACfC,UAAW,SAEbC,KAAM,CACJC,UAAWL,EAAMM,QAAQ,GACzBC,aAAcP,EAAMM,QAAQ,IAE9BE,OAAQ,CACNC,QAAST,EAAMM,QAAQ,EAAG,GAC1BD,UAAW,OACXK,gBACyB,UAAvBV,EAAMW,QAAQC,KACVZ,EAAMW,QAAQE,KAAK,KACnBb,EAAMW,QAAQE,KAAK,MAE3BnD,KAAM,CACJC,QAAS,QAEXC,YAAa,CACXC,KAAM,GAERC,UAAW,CACTC,MAAO,SAII,SAAS+C,IACtB,IAAM5C,EAAUV,IAqBhB,OAEE,yBAAKoB,UAAWV,EAAQ+B,MACrB,kBAACc,EAAA,EAAD,KAED,kBAACC,EAAA,EAAD,CAAwBC,MAAM,YAAYC,MAAM,YAAYC,KAAM,kBAACC,EAAA,EAAD,SAElE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAW7C,UAAU,OAAOG,UAAWV,EAAQkC,KAAMmB,SAAS,MAC5D,kBAACzC,EAAA,EAAD,CAAYC,QAAQ,KAAKN,UAAU,KAAK+C,cAAY,GAApD,iBAGA,kBAAC1C,EAAA,EAAD,CAAYC,QAAQ,KAAKN,UAAU,KAAK+C,cAAY,GACjD,eACA,oFAFH,IAEwF,kBAACC,EAAA,EAAD,OAExF,kBAAC3C,EAAA,EAAD,CAAYC,QAAQ,MAApB,mBAAyC,8BACzC,kBAACX,EAAA,EAAD,CAAMsD,WAAS,EAACpB,QAAS,GApCT,CACpB,CACEtB,MAAO,gBACPE,KAAM,SACNE,YACE,8FACFE,MAAO,qEACPqC,UAAW,eAEb,CACE3C,MAAO,aACPE,KAAM,SACNE,YACE,8FACFE,MAAO,qEACPqC,UAAW,eAsBUC,KAAI,SAACzD,GAAD,OACjB,kBAAC,EAAD,CAAM0D,IAAK1D,EAAKa,MAAOb,KAAMA,SAKrC,4BAAQS,UAAWV,EAAQsC,QACzB,kBAACc,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACzC,EAAA,EAAD,CAAYC,QAAQ,SAApB,cACa,kBAAC+C,EAAA,EAAD,CAAUlC,SAAS,WAEhC,kBAACJ,EAAD,SCnGUuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e80f6450.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\n\n\nconst useStyles = makeStyles({\n  card: {\n    display: 'flex',\n  },\n  cardDetails: {\n    flex: 1,\n  },\n  cardMedia: {\n    width: 160,\n  },\n});\n\nexport default function FeaturedPost(props) {\n  const classes = useStyles();\n  const { post } = props;\n\n  return (\n    <Grid item xs={12} md={12}>\n      <CardActionArea component=\"a\" href=\"#\">\n        <Card className={classes.card}>\n          <div className={classes.cardDetails}>\n            <CardContent>\n                \n              <Typography component=\"h2\" variant=\"h5\">\n                {post.title}\n              </Typography>\n              <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                {post.date}\n              </Typography>\n              <Typography variant=\"subtitle1\" paragraph>\n                {post.description}\n              </Typography>\n              <Typography variant=\"subtitle1\" color=\"primary\">\n                Continue reading...\n              </Typography>\n            </CardContent>\n          </div>\n          <CardMedia className={classes.cardMedia} image={post.image} title={post.imageTitle} />\n\n        </Card>\n      </CardActionArea>\n    </Grid>\n  );\n}\n\nFeaturedPost.propTypes = {\n  post: PropTypes.object,\n};","import React from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Link from \"@material-ui/core/Link\";\nimport { Favorite,GitHub ,Code,DeveloperMode }from \"@material-ui/icons\";\nimport Grid from '@material-ui/core/Grid';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\n\n\n\nimport Card from './Card';\n\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\">\n      {\"Copyright Â© \"}\n      <Link color=\"inherit\" href=\"https://github.com/bahyusanciko\" target=\"_blank\">\n        Bahyu Sanciko <GitHub fontSize=\"small\"s /> \n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    minHeight: \"100vh\"\n  },\n  main: {\n    marginTop: theme.spacing(8),\n    marginBottom: theme.spacing(2)\n  },\n  footer: {\n    padding: theme.spacing(3, 2),\n    marginTop: \"auto\",\n    backgroundColor:\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[200]\n        : theme.palette.grey[800]\n  },\n  card: {\n    display: 'flex',\n  },\n  cardDetails: {\n    flex: 1,\n  },\n  cardMedia: {\n    width: 160,\n  },\n}));\n\nexport default function StickyFooter() {\n  const classes = useStyles();\n\n  const featuredPosts = [\n    {\n      title: 'Featured post',\n      date: 'Nov 12',\n      description:\n        'This is a wider card with supporting text below as a natural lead-in to additional content.',\n      image: 'https://ionicframework.com/docs/v3/img/meta/ionic-framework-og.png',\n      imageText: 'asdsad Text',\n    },\n    {\n      title: 'Post title',\n      date: 'Nov 11',\n      description:\n        'This is a wider card with supporting text below as a natural lead-in to additional content.',\n      image: 'https://ionicframework.com/docs/v3/img/meta/ionic-framework-og.png',\n      imageText: 'asdas Text',\n    },\n  ];\n  \n  return (\n    \n    <div className={classes.root}>\n       <BottomNavigation>\n\n      <BottomNavigationAction label=\"Favorites\" value=\"favorites\" icon={<Code />} />\n       </BottomNavigation>\n      <CssBaseline />\n      <Container component=\"main\" className={classes.main} maxWidth=\"sm\">\n        <Typography variant=\"h3\" component=\"h1\" gutterBottom>\n          Bahyu Sanciko\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n          {\"Hello Semua,\"}\n          {\"Blog ini hanya berisikan bacotan saya tentang dunia IT sekian. #santuyprogramming\"} <DeveloperMode/>\n        </Typography>\n        <Typography variant=\"h6\">Tulisan Terbaru <br/></Typography>\n        <Grid container spacing={4}>\n            {featuredPosts.map((post) => (\n              <Card key={post.title} post={post} />\n            ))}\n          </Grid>\n      </Container>\n\n      <footer className={classes.footer}>\n        <Container maxWidth=\"sm\">\n          <Typography variant=\"body1\">\n            Built with <Favorite fontSize=\"small\" /> \n          </Typography>\n          <Copyright />\n        </Container>\n      </footer>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}