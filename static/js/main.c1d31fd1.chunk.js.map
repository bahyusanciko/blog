{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Copyright","Typography","variant","color","Link","href","sidebar","social","Date","getFullYear","name","icon","GitHubIcon","TwitterIcon","FacebookIcon","useStyles","makeStyles","theme","root","display","flexDirection","minHeight","main","marginTop","spacing","marginBottom","footer","padding","backgroundColor","palette","type","grey","StickyFooter","classes","className","CssBaseline","Container","component","maxWidth","gutterBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sTAaA,SAASA,IACP,OAAS,kBACLC,EAAA,EADK,CACMC,QAAU,QACrBC,MAAQ,iBAFH,IAGH,kBAHG,IAIH,kBACFC,EAAA,EADE,CACGD,MAAQ,UACbE,KAAO,4BAFL,gBAIAC,EAAQC,OAJR,KAMK,IAVF,KAWL,IAAIC,MAAOC,cAXN,IAaL,IAbK,KAmBX,IAAMH,EAAU,CACdC,OAAQ,CAAC,CACLG,KAAM,SACNC,KAAMC,KAER,CACEF,KAAM,UACNC,KAAME,KAER,CACEH,KAAM,WACNC,KAAMG,OAKNC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,QAAS,OACTC,cAAe,SACfC,UAAW,SAEbC,KAAM,CACJC,UAAWN,EAAMO,QAAQ,GACzBC,aAAcR,EAAMO,QAAQ,IAE9BE,OAAQ,CACNC,QAASV,EAAMO,QAAQ,EAAG,GAC1BD,UAAW,OACXK,gBAAwC,UAAvBX,EAAMY,QAAQC,KAC7Bb,EAAMY,QAAQE,KAAK,KAAOd,EAAMY,QAAQE,KAAK,UAIpC,SAASC,IACtB,IAAMC,EAAUlB,IAEhB,OAAS,yBACHmB,UACFD,EAAQf,MAEV,kBACAiB,EAAA,EADA,MAEA,kBACAC,EAAA,EADA,CACUC,UAAY,OACtBH,UACED,EAAQX,KAEVgB,SAAW,MACX,kBACArC,EAAA,EADA,CACWC,QAAU,KACrBmC,UAAY,KACZE,cAAY,GAHZ,kBANA,IAWa,kBACbtC,EAAA,EADa,CACFC,QAAU,KACrBmC,UAAY,KACZE,cAAY,GAHC,IAIX,8CAJW,IAMX,8DANW,KAXb,IAmBa,kBACbtC,EAAA,EADa,CACFC,QAAU,SADR,gCAnBb,KANO,IA2BK,4BACLgC,UACLD,EAAQP,QAEV,kBACAU,EAAA,EADA,CACUE,SAAW,MACrB,kBACArC,EAAA,EADA,CACWC,QAAU,SADrB,cAEW,kBAAE,IAAF,MAFX,oBAFA,IAKa,kBACbF,EADa,OATD,KA3BL,KC1DSwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c1d31fd1.chunk.js","sourcesContent":["import React from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  makeStyles\n} from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Link from \"@material-ui/core/Link\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport FacebookIcon from '@material-ui/icons/Facebook';\nimport TwitterIcon from '@material-ui/icons/Twitter';\n\nfunction Copyright() {\n  return ( <\n      Typography variant = \"body2\"\n      color = \"textSecondary\" > {\n        \"Copyright Â© \"\n      } <\n      Link color = \"inherit\"\n      href = \"https://material-ui.com/\" >\n      Your Website {\n        sidebar.social\n      } <\n      /Link>{\" \"} {\n      new Date().getFullYear()\n    } {\n      \".\"\n    } <\n    /Typography>\n);\n}\n\nconst sidebar = {\n  social: [{\n      name: 'GitHub',\n      icon: GitHubIcon\n    },\n    {\n      name: 'Twitter',\n      icon: TwitterIcon\n    },\n    {\n      name: 'Facebook',\n      icon: FacebookIcon\n    },\n  ],\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    minHeight: \"100vh\"\n  },\n  main: {\n    marginTop: theme.spacing(8),\n    marginBottom: theme.spacing(2)\n  },\n  footer: {\n    padding: theme.spacing(3, 2),\n    marginTop: \"auto\",\n    backgroundColor: theme.palette.type === \"light\" ?\n      theme.palette.grey[200] : theme.palette.grey[800]\n  }\n}));\n\nexport default function StickyFooter() {\n  const classes = useStyles();\n\n  return ( <\n    div className = {\n      classes.root\n    } >\n    <\n    CssBaseline / >\n    <\n    Container component = \"main\"\n    className = {\n      classes.main\n    }\n    maxWidth = \"sm\" >\n    <\n    Typography variant = \"h2\"\n    component = \"h1\"\n    gutterBottom >\n    Bahyu Sanciko <\n    /Typography> <\n    Typography variant = \"h5\"\n    component = \"h2\"\n    gutterBottom > {\n      \"Pin a footer to the bottom of the viewport.\"\n    } {\n      \"The footer will move as the main element of the page grows.\"\n    } <\n    /Typography> <\n    Typography variant = \"body1\" > Sticky footer placeholder. < /Typography> < /\n    Container > <\n    footer className = {\n      classes.footer\n    } >\n    <\n    Container maxWidth = \"sm\" >\n    <\n    Typography variant = \"body1\" >\n    Built with < FavoriteIcon / > -Bahyu Sanciko <\n    /Typography> <\n    Copyright / >\n    <\n    /Container> < /\n    footer > <\n    /div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}